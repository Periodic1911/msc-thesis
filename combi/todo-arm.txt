For test:
[x] MOV immediate
[x] Pre shift MOV (rotate *right* 2*op[11:0])
[x] tst
[x] mvn

LDR/STR
[x] byte
[x] up/down

LDRH/STRH
[x] sign
[] imm addr
[] reg addr
[] swp

Multi cycle (for real):
Having an extra write port and more forwarding logic and anothe ALUResult wire is too much for only a few instructions
-[x] Forward Op1 / Op2
-[x] Stall Fetch
-[x] Microinst counter (2 bit)
-[x] LDM stall (also halts uinst counter)
-[x] Force immediate 4

[] shift
[] *lo
[] *hi
[x] pass1
[] adc
[] adds

[] Shift with register
Rm >> Rs
Rn OP (Fwd) -> Rd

[x] STR/LDR with post inc
Rn -> (Rd)
(Fwd) + Rm -> Rn

[x] STR/LDR with pre inc
Rn + Rm -> (Rd)
(Fwd) -> Rn

[x] STM
(Post inc) Op2, Rn -> mem
(Pre inc) Op2, Rn + (-Imm(4)) -> mem
... Op2, Fwd + (-Imm(4)) -> mem
(Write back) (Fwd) -> Rn
(Write back post inc) (Fwd) + (-Imm(4)) -> Rn

[x] LDM
(Post inc) Rn -> (Rd)
(Pre inc) Rn + (-Imm(4)) -> (Rd)
... Fwd + (-Imm(4)) -> (Rd)
(Write back) (Fwd) -> Rn
(Write back post inc) (Fwd) + (-Imm(4)) -> Rn
  [x] Bit selector
  [x] Output current bit
  [x] Output stall
  [x] Enable input for stall (regsrc)

[] MLA
Rm *low Rs
Rn + (Fwd) -> Rd

[] MULL
Rm *low Rs -> RdLo
Rm *high Rs -> RdHi

[] MLAL
Rm *low Rs
RdLo +set Fwd -> RdLo
Rm *high Rs
RdHi +carry Fwd -> RdHi

New ALU ops
[x] Bit clear
[x] Not
[x] Reverse subtract
[x] ADD/SUB w/ Carry
[] Move to status register
[] Move from status register
[] Mult low
[] Mult High
[] Pre-shifter
  [x] mux shift to Op2
  [x] shift left
  [x] shift right
  [x] shift right arith
  [x] rotate right
  [x] 11:(7/8) shift amount
  [ ] shift by register

New Immediates
[x] 8-bit pre-shift imm
[] 8-bit ldrhb imm

Multi-cycle:
[] Swap (make single cycle, memory units support simulatneous write/read)

Other:
[] branch with link
